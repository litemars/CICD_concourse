/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 26 10:20:01 GMT 2017
 */
package org.magee.math;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.TooManyResourcesException;
import org.magee.math.Rational;

/** 
 * The main class under test is Rational.
 *  It describes a single rational and maintains information regarding: 
 *  - the numerator of the rational;
 *  - the denominator of the rational;
 * */

public class Rational_ESTestwithDescription {

    //Test case number: 0
    @Test
    public void test0() throws Throwable {
        // The test case instantiates a "Rational" with numerator equal to 16L, and denominator equal to 16L.
        Rational rational0 = new  Rational(16L, 16L);
        // The test case declares an object of the class "Rational"     whose value is equal to the absolute value of "rational0"
        Rational rational1 = rational0.abs();
        rational1.numerator = 1695L;
        rational0.denominator = 1695L;
        // Then, it tests: //1) whether the float value of "rational0" is equal to 0.009439528F with delta equal to 0.01F; float value for the object "rational0"
        assertEquals(0.009439528F, rational0.floatValue(), 0.01F);
        //2) whether the double value of "rational0" is equal to 0.00943952802359882 with delta equal to 0.01D; double value for the object "rational0"
        assertEquals(0.00943952802359882, rational0.doubleValue(), 0.01D);
    }

    //Test case number: 1
    @Test
    public void test1() throws Throwable {
        // The test case instantiates a "Rational" with numerator equal to -2660L, and denominator equal to 2393L.
        Rational rational0 = new  Rational((-2660L), 2393L);
        // The test case declares an object of the class "Rational"     whose value is equal to the absolute value of "rational0"
        Rational rational1 = rational0.abs();
        // Then, it tests:
        //1) whether the numerator of rational0 is equal to (-2660L);
        assertEquals((-2660L), rational0.numerator);
        //2) whether the float value of "rational1" is equal to 1.1115755F with delta equal to 0.01F; float value for the object "rational1"
        assertEquals(1.1115755F, rational1.floatValue(), 0.01F);
        //3) whether the double value of "rational1" is equal to 1.111575428332637 with delta equal to 0.01D; double value for the object "rational1"
        assertEquals(1.111575428332637, rational1.doubleValue(), 0.01D);
    }

    //Test case number: 2
    @Test
    public void test2() throws Throwable {
        // The test case instantiates a "Rational" with numerator equal to 2899L, and denominator equal to 925L.
        Rational rational0 = new  Rational(2899L, 925L);
        // The test case declares an object of the class "Rational"     whose value is equal to the reduce of "rational0"
        Rational rational1 = rational0.reduce();
        //  The next method call POW power 8 of "rational0"
        rational0.pow(8);
        //  The next method call reduce of "rational0"
        rational0.reduce();
        // The test case declares an object of the class "Rational"     whose value is equal to the inverse of "rational0"
        Rational rational2 = rational0.inverse();
        // The test case declares an object of the class "Rational"   // the method  subtract rational1 to the object "rational0"
        Rational rational3 = rational0.subtract(rational1);
        // The test case declares an object of the class "Rational"   // the method  multiply rational0 to the object "rational3"
        Rational rational4 = rational3.multiply(rational0);
        // Then, it  short value for the object "rational3"
        rational3.shortValue();
        // The test case declares an object of the class "Rational"   // the method  divide rational0 to the object "rational4"
        Rational rational5 = rational4.divide(rational0);
        // the method  add rational2 to the object "rational1"
        rational1.add(rational2);
        try {
            //  The next method call POW power 65 of "rational5"
            rational5.pow(65);
            fail("Expecting exception: TooManyResourcesException");
        } catch (TooManyResourcesException e) {
        }
    }

    //Test case number: 3
    @Test
    public void test3() throws Throwable {
        long long0 = 0L;
        // The test case instantiates a "Rational" with numerator equal to 2653L, and denominator equal to 2653L.
        Rational rational0 = new  Rational(2653L, 2653L);
        // The test case declares an object of the class "Rational"     whose value is equal to the absolute value of "rational0"
        Rational rational1 = rational0.abs();
        // the method  divide rational1 to the object "rational0"
        rational0.divide(rational1);
        // The test case declares an object of the class "Rational"     whose value is equal to the absolute value of "rational0"
        Rational rational2 = rational0.abs();
        // The test case declares an object of the class "Rational"   // the method  multiply rational0 to the object "rational2"
        Rational rational3 = rational2.multiply(rational0);
        // The test case declares an object of the class "Rational"     whose value is equal to the inverse of "rational3"
        Rational rational4 = rational3.inverse();
        // The test case declares an object of the class "Rational"   // the method  subtract rational3 to the object "rational4"
        Rational rational5 = rational4.subtract(rational3);
        try {
            // the method  add rational3 to the object "rational5"
            rational5.add(rational3);
            fail("Expecting exception: TooManyResourcesException");
        } catch (TooManyResourcesException e) {
        }
    }

    //Test case number: 4
    @Test
    public void test4() throws Throwable {
        // The test case instantiates a "Rational" with numerator equal to 5180L, and denominator equal to 5180L.
        Rational rational0 = new  Rational(5180L, 5180L);
        // The test case declares a long     whose value is equal to the long value of "rational0"
        long long0 = rational0.longValue();
        // Then, it tests:
        //1) whether "long0" is equal to 1L;
        assertEquals(1L, long0);
        // The test case declares an object of the class "Rational"     whose value is the divide of "rational0"
        Rational rational1 = rational0.divide(5180L);
        //2) whether the float value of "rational1" is equal to 1.9305019E-4F with delta equal to 0.01F; float value for the object "rational1"
        assertEquals(1.9305019E-4F, rational1.floatValue(), 0.01F);
        //3) whether the denominator of rational1 is equal to 26832400L;
        assertEquals(26832400L, rational1.denominator);
        //4) whether the double value of "rational1" is equal to 1.9305019305019305E-4 with delta equal to 0.01D; double value for the object "rational1"
        assertEquals(1.9305019305019305E-4, rational1.doubleValue(), 0.01D);
        //5) whether the long value of "rational1" is equal to 0L; long value for the object "rational1"
        assertEquals(0L, rational1.longValue());
        // The test case declares an object of the class "Rational"   // the method  subtract rational0 to the object "rational0"
        Rational rational2 = rational0.subtract(rational0);
        //6) whether the denominator of rational2 is equal to 26832400L;
        assertEquals(26832400L, rational2.denominator);
        //7) whether the double value of "rational2" is equal to 0.0 with delta equal to 0.01D; double value for the object "rational2"
        assertEquals(0.0, rational2.doubleValue(), 0.01D);
        //8) whether the float value of "rational2" is equal to 0.0F with delta equal to 0.01F; float value for the object "rational2"
        assertEquals(0.0F, rational2.floatValue(), 0.01F);
        //9) whether the long value of "rational2" is equal to 0L; long value for the object "rational2"
        assertEquals(0L, rational2.longValue());
    }

    //Test case number: 5
    @Test
    public void test5() throws Throwable {
        // The test case declares a long
        long long0 = (-1L);
        // The test case declares a long
        long long1 = (-2665L);
        // The test case instantiates a "Rational" with numerator equal to -1L, and denominator equal to -2665L.
        Rational rational0 = new  Rational((-1L), (-2665L));
        // The test case declares an object of the class "Rational"     whose value is the divide of "rational0"
        Rational rational1 = rational0.divide((-2665L));
        // the method  divide rational1 to the object "rational0"
        rational0.divide(rational1);
        long long2 = rational0.denominator;
        // The test case declares an object of the class "Rational"     whose value is equal to the reduce of "rational0"
        Rational rational2 = rational0.reduce();
        // Then, it  byte value for the object "rational0"
        rational0.byteValue();
        // The test case declares an object of the class "Rational"     whose value is equal to the inverse of "rational0"
        Rational rational3 = rational0.inverse();
        // the method  subtract rational3 to the object "rational0"
        rational0.subtract(rational3);
        // The test case instantiates a "Rational" with numerator equal to 3924L, and denominator equal to -3343L.
        Rational rational4 = new  Rational(3924L, (-3343L));
        try {
            //  The next method call the multiply long scalar 0L to rational2
            rational2.multiply(0L);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
        }
    }
}

